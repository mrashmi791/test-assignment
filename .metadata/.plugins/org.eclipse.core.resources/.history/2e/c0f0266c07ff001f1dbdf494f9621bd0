package com.example.demo.controllertest;

import com.example.userapi.dto.UserRequestDto;
import com.example.userapi.dto.UserResponseDto;
import com.example.userapi.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

public class UserControllerTest {

    private MockMvc mockMvc;

    @Mock
    private com.example.demo.service.UserService userService;

    @InjectMocks
    private UserControllerTest userController;

    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(userController).build();
    }

    @Test
    void testRegisterUser_Success() throws Exception {
        // Mock input data
        com.example.demo.dto.UserRequestDto requestDto = new com.example.demo.dto.UserRequestDto(
                "John Doe", "john.doe@example.com", 25, "France", "1234567890");

        com.example.demo.dto.UserResponseDto responseDto = new com.example.demo.dto.UserResponseDto(
                "12345", "John Doe", "john.doe@example.com", 25, "France", "1234567890");

        // Mock service method
        when(userService.registerUser(any(com.example.demo.dto.UserRequestDto.class))).thenReturn(responseDto);

        // Perform POST request
        mockMvc.perform(post("/users/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(requestDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value("12345"))
                .andExpect(jsonPath("$.name").value("John Doe"))
                .andExpect(jsonPath("$.email").value("john.doe@example.com"))
                .andExpect(jsonPath("$.age").value(25))
                .andExpect(jsonPath("$.country").value("France"))
                .andExpect(jsonPath("$.phoneNumber").value("1234567890"));

        // Verify service method call
        verify(userService, times(1)).registerUser(any(com.example.demo.dto.UserRequestDto.class));
    }
}
