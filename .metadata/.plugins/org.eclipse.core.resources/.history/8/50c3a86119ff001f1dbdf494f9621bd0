package com.example.demo.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.dto.UserRequestDto;
import com.example.demo.dto.UserResponseDto;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

//    public User registerUser(User user) {
//        return userRepository.save(user);
//    }
//
//    public List<User> getAllUsers() {
//        return userRepository.findAll();
//    }
//
//    public Optional<User> getUserById(String id) {
//        return userRepository.findById(id);
//    }
//
//    public User updateUser(String id, User userDetails) {
//        return userRepository.findById(id).map(user -> {
//            user.setName(userDetails.getName());
//            user.setEmail(userDetails.getEmail());
//            return userRepository.save(user);
//        }).orElseThrow(() -> new RuntimeException("User not found"));
//    }
//
//    public void deleteUser(String id) {
//        userRepository.deleteById(id);
//    }
    
    public UserResponseDto registerUser(UserRequestDto requestDto) {
        if (!"France".equalsIgnoreCase(requestDto.getCountry())) {
            throw new IllegalArgumentException("Only users from France are allowed");
        }

        User user = User.builder()
                .name(requestDto.getName())
                .email(requestDto.getEmail())
                .age(requestDto.getAge())
                .country(requestDto.getCountry())
                .phoneNumber(requestDto.getPhoneNumber()) // Optional field
                .build();

        User savedUser = userRepository.save(user);
        return new UserResponseDto(savedUser.getId(), savedUser.getName(), savedUser.getEmail(), savedUser.getAge(), savedUser.getCountry(), savedUser.getPhoneNumber());
    }

    public UserResponseDto getUserById(String id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found"));
        return new UserResponseDto(user.getId(), user.getName(), user.getEmail(), user.getAge(), user.getCountry(), user.getPhoneNumber());
    }
}